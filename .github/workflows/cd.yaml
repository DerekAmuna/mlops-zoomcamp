name: CD

on:
  push:
    branches:
      - develop

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }} 
      
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform plan
        id: plan
        working-directory: 'chapter6/optional'
        run: |
          terraform init -backend-config=backend-prod.hcl -reconfigure
          terraform plan -var-file="vars/prod.tfvars" -out=tfplan
      
      - name: Terraform apply
        id: apply
        working-directory: 'chapter6/optional'
        if: ${{ steps.plan.outcome  }} == 'success'
        run: |
          terraform apply tfplan -auto-approve -var-file="vars/prod.tfvars"
          echo "::set-output name=ecr_repo::$(terraform output ecr_repo | xargs)"
          echo "::set-output name=predictions_stream_name::$(terraform output predictions_stream_name | xargs)"
          echo "::set-output name=model_bucket::$(terraform output model_bucket | xargs)"
          echo "::set-output name=lambda_function::$(terraform output lambda_function | xargs)"

      - name: login to ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build and push docker image
        id: build-image
        working-directory: 'chapter6/streaming'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.apply.outputs.ecr_repo }}
          IMAGE_TAG: latest
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "::set-output name=image_uri::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
      
      - name: Get model artifacts
        id: get-model-artifacts
        working-directory: 'chapter6/streaming'
        env:
          MODEL_BUCKET_PROD: ${{ steps.apply.outputs.model_bucket }}
          MODEL_BUCKET_DEV: "mlflow-derek"
        run: |
          export RUN_ID=$(aws s3 ls s3://${MODEL_BUCKET_DEV}/1/ | sort | tail -n 1 | awk -F'/' '{print $1}' | awk '{print $2}')
          aws s3 sync s3://${MODEL_BUCKET_DEV} s3://${MODEL_BUCKET_PROD}
          echo "::set-output name=run_id::${RUN_ID}"
      
      - name: Update lambda function
        working-directory: 'chapter6/optional'
        env:
          LAMBDA_FUNCTION: ${{ steps.apply.outputs.lambda_function }}
          PREDICTIONS_STREAM_NAME: ${{ steps.apply.outputs.predictions_stream_name }}
          MODEL_BUCKET: ${{ steps.apply.outputs.model_bucket }}
          RUN_ID: ${{ steps.get-model-artifacts.outputs.run_id }}
        run: |
            variables="{PREDICTIONS_STREAM_NAME=$PREDICTIONS_STREAM_NAME, MODEL_BUCKET=$MODEL_BUCKET, RUN_ID=$RUN_ID}"

              STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "eu-west-1" --query 'Configuration.LastUpdateStatus' --output text)
                  while [[ "$STATE" == "InProgress" ]]
                  do
                      echo "sleep 5sec ...."
                      sleep 5s
                      STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "eu-west-1" --query 'Configuration.LastUpdateStatus' --output text)
                      echo $STATE
                  done

              aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION \
                        --environment "Variables=${variables}"